// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file proto/streamer-info.proto (package imakara, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message imakara.GetDetailRequest
 */
export class GetDetailRequest extends Message<GetDetailRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetDetailRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "imakara.GetDetailRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDetailRequest {
    return new GetDetailRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDetailRequest {
    return new GetDetailRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDetailRequest {
    return new GetDetailRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDetailRequest | PlainMessage<GetDetailRequest> | undefined, b: GetDetailRequest | PlainMessage<GetDetailRequest> | undefined): boolean {
    return proto3.util.equals(GetDetailRequest, a, b);
  }
}

/**
 * @generated from message imakara.GetDetailResponse
 */
export class GetDetailResponse extends Message<GetDetailResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: string thumbnail_url = 4;
   */
  thumbnailUrl = "";

  /**
   * @generated from field: string avatar_url = 5;
   */
  avatarUrl = "";

  /**
   * @generated from field: string person_id = 6;
   */
  personId = "";

  /**
   * @generated from field: string stream_url = 7;
   */
  streamUrl = "";

  constructor(data?: PartialMessage<GetDetailResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "imakara.GetDetailResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "thumbnail_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "person_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "stream_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDetailResponse {
    return new GetDetailResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDetailResponse {
    return new GetDetailResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDetailResponse {
    return new GetDetailResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDetailResponse | PlainMessage<GetDetailResponse> | undefined, b: GetDetailResponse | PlainMessage<GetDetailResponse> | undefined): boolean {
    return proto3.util.equals(GetDetailResponse, a, b);
  }
}

/**
 * @generated from message imakara.ListProgramRequest
 */
export class ListProgramRequest extends Message<ListProgramRequest> {
  /**
   * @generated from field: int32 days = 1;
   */
  days = 0;

  /**
   * @generated from field: int32 tz_diff = 2;
   */
  tzDiff = 0;

  constructor(data?: PartialMessage<ListProgramRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "imakara.ListProgramRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "days", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "tz_diff", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProgramRequest {
    return new ListProgramRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProgramRequest {
    return new ListProgramRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProgramRequest {
    return new ListProgramRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListProgramRequest | PlainMessage<ListProgramRequest> | undefined, b: ListProgramRequest | PlainMessage<ListProgramRequest> | undefined): boolean {
    return proto3.util.equals(ListProgramRequest, a, b);
  }
}

/**
 * @generated from message imakara.ListProgramResponse
 */
export class ListProgramResponse extends Message<ListProgramResponse> {
  /**
   * @generated from field: repeated imakara.MProgramIndex program_indexes = 1;
   */
  programIndexes: MProgramIndex[] = [];

  constructor(data?: PartialMessage<ListProgramResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "imakara.ListProgramResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "program_indexes", kind: "message", T: MProgramIndex, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProgramResponse {
    return new ListProgramResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProgramResponse {
    return new ListProgramResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProgramResponse {
    return new ListProgramResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListProgramResponse | PlainMessage<ListProgramResponse> | undefined, b: ListProgramResponse | PlainMessage<ListProgramResponse> | undefined): boolean {
    return proto3.util.equals(ListProgramResponse, a, b);
  }
}

/**
 * @generated from message imakara.MProgramIndex
 */
export class MProgramIndex extends Message<MProgramIndex> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: uint64 scheduled_utime = 2;
   */
  scheduledUtime = protoInt64.zero;

  constructor(data?: PartialMessage<MProgramIndex>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "imakara.MProgramIndex";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "scheduled_utime", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MProgramIndex {
    return new MProgramIndex().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MProgramIndex {
    return new MProgramIndex().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MProgramIndex {
    return new MProgramIndex().fromJsonString(jsonString, options);
  }

  static equals(a: MProgramIndex | PlainMessage<MProgramIndex> | undefined, b: MProgramIndex | PlainMessage<MProgramIndex> | undefined): boolean {
    return proto3.util.equals(MProgramIndex, a, b);
  }
}

