// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file proto/common.proto (package imakara_admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum imakara_admin.ValidationResult
 */
export enum ValidationResult {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: SUCCESS = 1;
   */
  SUCCESS = 1,

  /**
   * @generated from enum value: FAILURE = 2;
   */
  FAILURE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ValidationResult)
proto3.util.setEnumType(ValidationResult, "imakara_admin.ValidationResult", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "SUCCESS" },
  { no: 2, name: "FAILURE" },
]);

/**
 * @generated from message imakara_admin.ListStreamersRequest
 */
export class ListStreamersRequest extends Message<ListStreamersRequest> {
  constructor(data?: PartialMessage<ListStreamersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "imakara_admin.ListStreamersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListStreamersRequest {
    return new ListStreamersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListStreamersRequest {
    return new ListStreamersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListStreamersRequest {
    return new ListStreamersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListStreamersRequest | PlainMessage<ListStreamersRequest> | undefined, b: ListStreamersRequest | PlainMessage<ListStreamersRequest> | undefined): boolean {
    return proto3.util.equals(ListStreamersRequest, a, b);
  }
}

/**
 * @generated from message imakara_admin.ListStreamersResponse
 */
export class ListStreamersResponse extends Message<ListStreamersResponse> {
  /**
   * @generated from field: repeated string streamers = 1;
   */
  streamers: string[] = [];

  constructor(data?: PartialMessage<ListStreamersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "imakara_admin.ListStreamersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "streamers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListStreamersResponse {
    return new ListStreamersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListStreamersResponse {
    return new ListStreamersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListStreamersResponse {
    return new ListStreamersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListStreamersResponse | PlainMessage<ListStreamersResponse> | undefined, b: ListStreamersResponse | PlainMessage<ListStreamersResponse> | undefined): boolean {
    return proto3.util.equals(ListStreamersResponse, a, b);
  }
}

/**
 * @generated from message imakara_admin.ListStreamerInfoRequest
 */
export class ListStreamerInfoRequest extends Message<ListStreamerInfoRequest> {
  constructor(data?: PartialMessage<ListStreamerInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "imakara_admin.ListStreamerInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListStreamerInfoRequest {
    return new ListStreamerInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListStreamerInfoRequest {
    return new ListStreamerInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListStreamerInfoRequest {
    return new ListStreamerInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListStreamerInfoRequest | PlainMessage<ListStreamerInfoRequest> | undefined, b: ListStreamerInfoRequest | PlainMessage<ListStreamerInfoRequest> | undefined): boolean {
    return proto3.util.equals(ListStreamerInfoRequest, a, b);
  }
}

/**
 * @generated from message imakara_admin.ListStreamerInfoResponse
 */
export class ListStreamerInfoResponse extends Message<ListStreamerInfoResponse> {
  /**
   * @generated from field: repeated string ids = 1;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<ListStreamerInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "imakara_admin.ListStreamerInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListStreamerInfoResponse {
    return new ListStreamerInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListStreamerInfoResponse {
    return new ListStreamerInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListStreamerInfoResponse {
    return new ListStreamerInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListStreamerInfoResponse | PlainMessage<ListStreamerInfoResponse> | undefined, b: ListStreamerInfoResponse | PlainMessage<ListStreamerInfoResponse> | undefined): boolean {
    return proto3.util.equals(ListStreamerInfoResponse, a, b);
  }
}

/**
 * @generated from message imakara_admin.PutStreamerInfoRequest
 */
export class PutStreamerInfoRequest extends Message<PutStreamerInfoRequest> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: string avatar_url = 3;
   */
  avatarUrl = "";

  /**
   * @generated from field: string primary_channel = 4;
   */
  primaryChannel = "";

  constructor(data?: PartialMessage<PutStreamerInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "imakara_admin.PutStreamerInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "primary_channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutStreamerInfoRequest {
    return new PutStreamerInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutStreamerInfoRequest {
    return new PutStreamerInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutStreamerInfoRequest {
    return new PutStreamerInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PutStreamerInfoRequest | PlainMessage<PutStreamerInfoRequest> | undefined, b: PutStreamerInfoRequest | PlainMessage<PutStreamerInfoRequest> | undefined): boolean {
    return proto3.util.equals(PutStreamerInfoRequest, a, b);
  }
}

/**
 * @generated from message imakara_admin.PutStreamerInfoResponse
 */
export class PutStreamerInfoResponse extends Message<PutStreamerInfoResponse> {
  /**
   * @generated from field: imakara_admin.ValidationResult result = 1;
   */
  result = ValidationResult.UNKNOWN;

  /**
   * @generated from field: string reason = 2;
   */
  reason = "";

  constructor(data?: PartialMessage<PutStreamerInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "imakara_admin.PutStreamerInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(ValidationResult) },
    { no: 2, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutStreamerInfoResponse {
    return new PutStreamerInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutStreamerInfoResponse {
    return new PutStreamerInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutStreamerInfoResponse {
    return new PutStreamerInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PutStreamerInfoResponse | PlainMessage<PutStreamerInfoResponse> | undefined, b: PutStreamerInfoResponse | PlainMessage<PutStreamerInfoResponse> | undefined): boolean {
    return proto3.util.equals(PutStreamerInfoResponse, a, b);
  }
}

/**
 * @generated from message imakara_admin.StreamerInfoRequest
 */
export class StreamerInfoRequest extends Message<StreamerInfoRequest> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  constructor(data?: PartialMessage<StreamerInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "imakara_admin.StreamerInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamerInfoRequest {
    return new StreamerInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamerInfoRequest {
    return new StreamerInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamerInfoRequest {
    return new StreamerInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamerInfoRequest | PlainMessage<StreamerInfoRequest> | undefined, b: StreamerInfoRequest | PlainMessage<StreamerInfoRequest> | undefined): boolean {
    return proto3.util.equals(StreamerInfoRequest, a, b);
  }
}

/**
 * @generated from message imakara_admin.StreamerInfoResponse
 */
export class StreamerInfoResponse extends Message<StreamerInfoResponse> {
  /**
   * @generated from field: imakara_admin.ValidationResponse validation_response = 1;
   */
  validationResponse?: ValidationResponse;

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string avatar_url = 3;
   */
  avatarUrl = "";

  /**
   * @generated from field: string primary_channel = 4;
   */
  primaryChannel = "";

  constructor(data?: PartialMessage<StreamerInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "imakara_admin.StreamerInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validation_response", kind: "message", T: ValidationResponse },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "primary_channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamerInfoResponse {
    return new StreamerInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamerInfoResponse {
    return new StreamerInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamerInfoResponse {
    return new StreamerInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamerInfoResponse | PlainMessage<StreamerInfoResponse> | undefined, b: StreamerInfoResponse | PlainMessage<StreamerInfoResponse> | undefined): boolean {
    return proto3.util.equals(StreamerInfoResponse, a, b);
  }
}

/**
 * @generated from message imakara_admin.StreamerDetailRequest
 */
export class StreamerDetailRequest extends Message<StreamerDetailRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<StreamerDetailRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "imakara_admin.StreamerDetailRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamerDetailRequest {
    return new StreamerDetailRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamerDetailRequest {
    return new StreamerDetailRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamerDetailRequest {
    return new StreamerDetailRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamerDetailRequest | PlainMessage<StreamerDetailRequest> | undefined, b: StreamerDetailRequest | PlainMessage<StreamerDetailRequest> | undefined): boolean {
    return proto3.util.equals(StreamerDetailRequest, a, b);
  }
}

/**
 * @generated from message imakara_admin.StreamerDetailResponse
 */
export class StreamerDetailResponse extends Message<StreamerDetailResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string avatar_url = 3;
   */
  avatarUrl = "";

  /**
   * @generated from field: string primary_channel = 4;
   */
  primaryChannel = "";

  constructor(data?: PartialMessage<StreamerDetailResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "imakara_admin.StreamerDetailResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "avatar_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "primary_channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamerDetailResponse {
    return new StreamerDetailResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamerDetailResponse {
    return new StreamerDetailResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamerDetailResponse {
    return new StreamerDetailResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamerDetailResponse | PlainMessage<StreamerDetailResponse> | undefined, b: StreamerDetailResponse | PlainMessage<StreamerDetailResponse> | undefined): boolean {
    return proto3.util.equals(StreamerDetailResponse, a, b);
  }
}

/**
 * @generated from message imakara_admin.ValidationResponse
 */
export class ValidationResponse extends Message<ValidationResponse> {
  /**
   * @generated from field: imakara_admin.ValidationResult result = 1;
   */
  result = ValidationResult.UNKNOWN;

  /**
   * @generated from field: string reason = 2;
   */
  reason = "";

  constructor(data?: PartialMessage<ValidationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "imakara_admin.ValidationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(ValidationResult) },
    { no: 2, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidationResponse {
    return new ValidationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidationResponse {
    return new ValidationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidationResponse {
    return new ValidationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ValidationResponse | PlainMessage<ValidationResponse> | undefined, b: ValidationResponse | PlainMessage<ValidationResponse> | undefined): boolean {
    return proto3.util.equals(ValidationResponse, a, b);
  }
}

